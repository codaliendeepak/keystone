# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Client {
  id: ID!
  name: String
  description: String
  photo: ImageFieldOutput
  status: String
  email: String
  phone: Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ClientWhereUniqueInput {
  id: ID
  email: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  status: StringNullableFilter
  email: StringFilter
  phone: IntFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
  email: OrderDirection
  phone: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ClientUpdateInput {
  name: String
  description: String
  photo: ImageFieldInput
  status: String
  email: String
  phone: Int
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  name: String
  description: String
  photo: ImageFieldInput
  status: String
  email: String
  phone: Int
}

type Faq {
  id: ID!
  Question: String
  ans: String
}

input FaqWhereUniqueInput {
  id: ID
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IDFilter
  Question: StringFilter
  ans: StringFilter
}

input FaqOrderByInput {
  id: OrderDirection
  Question: OrderDirection
  ans: OrderDirection
}

input FaqUpdateInput {
  Question: String
  ans: String
}

input FaqUpdateArgs {
  where: FaqWhereUniqueInput!
  data: FaqUpdateInput!
}

input FaqCreateInput {
  Question: String
  ans: String
}

type Content {
  id: ID!
  pagename: String
  image: ImageFieldOutput
  type: String
  description: String
  heading: String
  Section: String
}

input ContentWhereUniqueInput {
  id: ID
}

input ContentWhereInput {
  AND: [ContentWhereInput!]
  OR: [ContentWhereInput!]
  NOT: [ContentWhereInput!]
  id: IDFilter
  pagename: StringNullableFilter
  type: StringNullableFilter
  description: StringFilter
  heading: StringFilter
  Section: StringNullableFilter
}

input ContentOrderByInput {
  id: OrderDirection
  pagename: OrderDirection
  type: OrderDirection
  description: OrderDirection
  heading: OrderDirection
  Section: OrderDirection
}

input ContentUpdateInput {
  pagename: String
  image: ImageFieldInput
  type: String
  description: String
  heading: String
  Section: String
}

input ContentUpdateArgs {
  where: ContentWhereUniqueInput!
  data: ContentUpdateInput!
}

input ContentCreateInput {
  pagename: String
  image: ImageFieldInput
  type: String
  description: String
  heading: String
  Section: String
}

type FormQuery {
  id: ID!
  name: String
  type: String
  description: String
  buisnessCategory: String
  email: String
  packagesCount: String
  subject: String
}

input FormQueryWhereUniqueInput {
  id: ID
  email: String
}

input FormQueryWhereInput {
  AND: [FormQueryWhereInput!]
  OR: [FormQueryWhereInput!]
  NOT: [FormQueryWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringNullableFilter
  description: StringFilter
  buisnessCategory: StringFilter
  email: StringFilter
  packagesCount: StringFilter
  subject: StringFilter
}

input FormQueryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  description: OrderDirection
  buisnessCategory: OrderDirection
  email: OrderDirection
  packagesCount: OrderDirection
  subject: OrderDirection
}

input FormQueryUpdateInput {
  name: String
  type: String
  description: String
  buisnessCategory: String
  email: String
  packagesCount: String
  subject: String
}

input FormQueryUpdateArgs {
  where: FormQueryWhereUniqueInput!
  data: FormQueryUpdateInput!
}

input FormQueryCreateInput {
  name: String
  type: String
  description: String
  buisnessCategory: String
  email: String
  packagesCount: String
  subject: String
}

type JobRole {
  id: ID!
  jobrole: String
  employmenttype: String
  jobType: String
  jobResponsilbilties: String
  jobRequirements: String
  jobLocation: String
}

input JobRoleWhereUniqueInput {
  id: ID
}

input JobRoleWhereInput {
  AND: [JobRoleWhereInput!]
  OR: [JobRoleWhereInput!]
  NOT: [JobRoleWhereInput!]
  id: IDFilter
  jobrole: StringFilter
  employmenttype: StringNullableFilter
  jobType: StringNullableFilter
  jobResponsilbilties: StringFilter
  jobRequirements: StringFilter
  jobLocation: StringFilter
}

input JobRoleOrderByInput {
  id: OrderDirection
  jobrole: OrderDirection
  employmenttype: OrderDirection
  jobType: OrderDirection
  jobResponsilbilties: OrderDirection
  jobRequirements: OrderDirection
  jobLocation: OrderDirection
}

input JobRoleUpdateInput {
  jobrole: String
  employmenttype: String
  jobType: String
  jobResponsilbilties: String
  jobRequirements: String
  jobLocation: String
}

input JobRoleUpdateArgs {
  where: JobRoleWhereUniqueInput!
  data: JobRoleUpdateInput!
}

input JobRoleCreateInput {
  jobrole: String
  employmenttype: String
  jobType: String
  jobResponsilbilties: String
  jobRequirements: String
  jobLocation: String
}

type JobApplication {
  id: ID!
  name: String
  email: String
  jobRole: String
  coverLetter: String
}

input JobApplicationWhereUniqueInput {
  id: ID
}

input JobApplicationWhereInput {
  AND: [JobApplicationWhereInput!]
  OR: [JobApplicationWhereInput!]
  NOT: [JobApplicationWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  jobRole: StringFilter
  coverLetter: StringFilter
}

input JobApplicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  jobRole: OrderDirection
  coverLetter: OrderDirection
}

input JobApplicationUpdateInput {
  name: String
  email: String
  jobRole: String
  coverLetter: String
}

input JobApplicationUpdateArgs {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateInput!
}

input JobApplicationCreateInput {
  name: String
  email: String
  jobRole: String
  coverLetter: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  createdAt: DateTimeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createFaq(data: FaqCreateInput!): Faq
  createFaqs(data: [FaqCreateInput!]!): [Faq]
  updateFaq(where: FaqWhereUniqueInput!, data: FaqUpdateInput!): Faq
  updateFaqs(data: [FaqUpdateArgs!]!): [Faq]
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteFaqs(where: [FaqWhereUniqueInput!]!): [Faq]
  createContent(data: ContentCreateInput!): Content
  createContents(data: [ContentCreateInput!]!): [Content]
  updateContent(where: ContentWhereUniqueInput!, data: ContentUpdateInput!): Content
  updateContents(data: [ContentUpdateArgs!]!): [Content]
  deleteContent(where: ContentWhereUniqueInput!): Content
  deleteContents(where: [ContentWhereUniqueInput!]!): [Content]
  createFormQuery(data: FormQueryCreateInput!): FormQuery
  createFormQueries(data: [FormQueryCreateInput!]!): [FormQuery]
  updateFormQuery(where: FormQueryWhereUniqueInput!, data: FormQueryUpdateInput!): FormQuery
  updateFormQueries(data: [FormQueryUpdateArgs!]!): [FormQuery]
  deleteFormQuery(where: FormQueryWhereUniqueInput!): FormQuery
  deleteFormQueries(where: [FormQueryWhereUniqueInput!]!): [FormQuery]
  createJobRole(data: JobRoleCreateInput!): JobRole
  createJobRoles(data: [JobRoleCreateInput!]!): [JobRole]
  updateJobRole(where: JobRoleWhereUniqueInput!, data: JobRoleUpdateInput!): JobRole
  updateJobRoles(data: [JobRoleUpdateArgs!]!): [JobRole]
  deleteJobRole(where: JobRoleWhereUniqueInput!): JobRole
  deleteJobRoles(where: [JobRoleWhereUniqueInput!]!): [JobRole]
  createJobApplication(data: JobApplicationCreateInput!): JobApplication
  createJobApplications(data: [JobApplicationCreateInput!]!): [JobApplication]
  updateJobApplication(where: JobApplicationWhereUniqueInput!, data: JobApplicationUpdateInput!): JobApplication
  updateJobApplications(data: [JobApplicationUpdateArgs!]!): [JobApplication]
  deleteJobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  deleteJobApplications(where: [JobApplicationWhereUniqueInput!]!): [JobApplication]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0): [Client!]
  client(where: ClientWhereUniqueInput!): Client
  clientsCount(where: ClientWhereInput! = {}): Int
  faqs(where: FaqWhereInput! = {}, orderBy: [FaqOrderByInput!]! = [], take: Int, skip: Int! = 0): [Faq!]
  faq(where: FaqWhereUniqueInput!): Faq
  faqsCount(where: FaqWhereInput! = {}): Int
  contents(where: ContentWhereInput! = {}, orderBy: [ContentOrderByInput!]! = [], take: Int, skip: Int! = 0): [Content!]
  content(where: ContentWhereUniqueInput!): Content
  contentsCount(where: ContentWhereInput! = {}): Int
  formQueries(where: FormQueryWhereInput! = {}, orderBy: [FormQueryOrderByInput!]! = [], take: Int, skip: Int! = 0): [FormQuery!]
  formQuery(where: FormQueryWhereUniqueInput!): FormQuery
  formQueriesCount(where: FormQueryWhereInput! = {}): Int
  jobRoles(where: JobRoleWhereInput! = {}, orderBy: [JobRoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [JobRole!]
  jobRole(where: JobRoleWhereUniqueInput!): JobRole
  jobRolesCount(where: JobRoleWhereInput! = {}): Int
  jobApplications(where: JobApplicationWhereInput! = {}, orderBy: [JobApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0): [JobApplication!]
  jobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  jobApplicationsCount(where: JobApplicationWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
